<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Posts on Ian Teda</title>
    <link>https://ianteda.com/v2/programming/</link>
    <description>Recent content in Programming Posts on Ian Teda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ianteda.com/v2/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The API Design Guide</title>
      <link>https://ianteda.com/v2/programming/the-api-design-guide/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ianteda.com/v2/programming/the-api-design-guide/</guid>
      <description>An API allows one piece of software talking to another piece of software
 Definitions Some terms used in this guide and there definitions:
 API - Application Programming Interface, an interface for one piece of software to talk to another; Collection - A collection of resources found at an endpoint; Consumer (Client) - A client computer application making requests of the API; cURL - A command line tool for getting and sending files using URL syntax; Endpoint - An API URL on a Server which represents either a Resource or a Collection; Granularity - The level of detailed returned in the request response; HTTP - A protocol for communicating over networks, aka the internet; Idempotent (Stateless) - Side-effect free, can happen multiple times without affecting the data state; Resource - A single instance of an object in an endpoint request response; REST (RESTful) - Representational State Transfer, an architectural style for the design of network-based software; SSL - Secure Socket Layer, the standard security technology for establishing an encrypted link between a web server and a browser URL - Uniform Resource Locator and is a reference (an address) to a resource on the Internet.</description>
    </item>
    
    <item>
      <title>Gulp Jekyll Workflow - Part 1 Design Pattern</title>
      <link>https://ianteda.com/v2/programming/gulp-jekyll-workflow-1/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ianteda.com/v2/programming/gulp-jekyll-workflow-1/</guid>
      <description>Always start with the end in mind. So you know what direction to travel  — Ian Teda 
 Keeping the end in mind, I listed four design criteria (patterns) to target when writting Gulp tasks. I wanted my workflow to be modern, simple, configurable and modulised.
Design Criteria/Patterns
 Use ES2015, ECMAScript 2015 (modern): Why? Get accustom to new JavaScript features before they become mainstream. Command Line Interface (simple): Why?</description>
    </item>
    
    <item>
      <title>The Gulp, Jekyll, Github Pages &amp; Cloudflare Mixture</title>
      <link>https://ianteda.com/v2/programming/the-gulp-jekyll-github-pages-cloudflare-mixture/</link>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ianteda.com/v2/programming/the-gulp-jekyll-github-pages-cloudflare-mixture/</guid>
      <description>Flexible, simple, fast, secure &amp;amp; https. Total cost, $15AUD for domain registration.  — Ian Teda 
 Web technologies for development hosting and security are vast. With proponents singing their own praises. At the start of my ianteda.com project 1 I looked around at the options.
Wordpress{:target=&amp;rdquo;_blank&amp;rdquo;} serves up over 26%2 of the internet. Been there done that, so I crossed it off the list .
I almost settled on Ghost{:target=&amp;rdquo;_blank&amp;rdquo;}.</description>
    </item>
    
  </channel>
</rss>